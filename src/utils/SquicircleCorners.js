/**
 * Squircle Corners
 * Reference:
 *      1. https://iamvdo.me/en/blog/smooth-corners-with-css-houdini
 *      2. https://qatalog.com/product/automation/
 */
"undefined" !== typeof window && CSS && "paintWorklet" in CSS && CSS.paintWorklet.addModule(URL.createObjectURL(new Blob(['\n          const drawSquircle = (ctx, geom, corners, radius, smooth, lineWidth, color) => {\n            const defaultFill = color;\n            const lineWidthOffset = lineWidth / 2;\n\n            // OPEN LEFT-TOP CORNER\n            ctx.beginPath();\n            // ctx.lineTo(radius, lineWidthOffset);\n\n            // TOP-RIGHT CORNER\n            if (corners.has(\'top-right\')) {\n              ctx.lineTo(geom.width - radius, lineWidthOffset);\n              ctx.bezierCurveTo(\n                geom.width - radius / smooth,\n                lineWidthOffset, // first bezier point\n                geom.width - lineWidthOffset,\n                radius / smooth, // second bezier point\n                geom.width - lineWidthOffset,\n                radius // last connect point\n                );\n            } else {\n              ctx.lineTo(geom.width - lineWidthOffset, lineWidthOffset);\n            }\n\n            // BOTTOM-RIGHT CORNER\n            if (corners.has(\'bottom-right\')) {\n              ctx.lineTo(geom.width - lineWidthOffset, geom.height - radius);\n              ctx.bezierCurveTo(\n                geom.width - lineWidthOffset,\n                geom.height - radius / smooth, // first bezier point\n                geom.width - radius / smooth,\n                geom.height - lineWidthOffset, // second bezier point\n                geom.width - radius,\n                geom.height - lineWidthOffset // last connect point\n              );\n            } else {\n              ctx.lineTo(geom.width - lineWidthOffset, geom.height - lineWidthOffset);\n            }\n\n            // BOTTOM-LEFT CORNER\n            if (corners.has(\'bottom-left\')) {\n              ctx.lineTo(radius, geom.height - lineWidthOffset);\n              ctx.bezierCurveTo(\n                radius / smooth,\n                geom.height - lineWidthOffset, // first bezier point\n                lineWidthOffset,\n                geom.height - radius / smooth, // second bezier point\n                lineWidthOffset,\n                geom.height - radius // last connect point\n              );\n            } else {\n              ctx.lineTo(lineWidthOffset, geom.height - lineWidthOffset);\n            }\n\n            // CLOSE LEFT-TOP CORNER\n            if (corners.has(\'top-left\')) {\n              ctx.lineTo(lineWidthOffset, radius);\n              ctx.bezierCurveTo(\n                lineWidthOffset,\n                radius / smooth, // first bezier point\n                radius / smooth,\n                lineWidthOffset, // second bezier point\n                radius,\n                lineWidthOffset // last connect point\n              );\n            } else {\n              ctx.lineTo(lineWidthOffset, lineWidthOffset);\n            }\n\n            ctx.closePath();\n          \n            if (lineWidth) {\n              ctx.strokeStyle = defaultFill;\n              ctx.lineWidth = lineWidth;\n              ctx.stroke();\n            } else {\n              ctx.fillStyle = defaultFill;\n              ctx.fill();\n            }\n          };\n          \n          if (typeof registerPaint !== "undefined") {\n            class SquirclePainter {\n              static get contextOptions() {\n                return { alpha: true };\n              }\n              static get inputProperties() {\n                return [\n                  "--squircle-radius",\n                  "--squircle-smooth",\n                  "--squircle-outline",\n                  "--squircle-fill",\n                  "--squircle-ratio",\n                  "--squircle-corners",\n                ];\n              }\n          \n              paint(ctx, geom, properties) {\n                const customRatio = properties.get("--squircle-ratio");\n                const smoothRatio = 10;\n                const distanceRatio = parseFloat(customRatio)\n                  ? parseFloat(customRatio)\n                  : 1.8;\n                const squircleSmooth = parseFloat(\n                  properties.get("--squircle-smooth") * smoothRatio\n                );\n                const squircleRadius =\n                  parseInt(properties.get("--squircle-radius"), 10) * distanceRatio;\n                const squrcleOutline = parseFloat(\n                  properties.get("--squircle-outline"),\n                  10\n                );\n                const squircleColor = properties\n                  .get("--squircle-fill")\n                  .toString()\n                  .replace(/s/g, "");\n          \n                const isSmooth = () => {\n                  if (typeof properties.get("--squircle-smooth")[0] !== "undefined") {\n                    if (squircleSmooth === 0) {\n                      return 1;\n                    }\n                    return squircleSmooth;\n                  } else {\n                    return 10;\n                  }\n                };\n          \n                const isOutline = () => {\n                  if (squrcleOutline) {\n                    return squrcleOutline;\n                  } else {\n                    return 0;\n                  }\n                };\n          \n                const isColor = () => {\n                  if (squircleColor) {\n                    return squircleColor;\n                  } else {\n                    return "#2f2f2f";\n                  }\n                };\n\n                const corners = new Set(properties.get(\'--squircle-corners\')?.[0]?.split(\' \'));\n          \n                if (squircleRadius < geom.width / 2 && squircleRadius < geom.height / 2) {\n                  drawSquircle(\n                    ctx,\n                    geom,\n                    corners,\n                    squircleRadius,\n                    isSmooth(),\n                    isOutline(),\n                    isColor()\n                  );\n                } else {\n                  drawSquircle(\n                    ctx,\n                    geom,\n                    corners,\n                    Math.min(geom.width / 2, geom.height / 2),\n                    isSmooth(),\n                    isOutline(),\n                    isColor()\n                  );\n                }\n              }\n            }\n  \n            registerPaint("squircle", SquirclePainter);\n          }\n          '],{
    type: "text/javascript"
})));